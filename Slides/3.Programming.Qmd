---
title: "Basics of Programming: <br/> if...else, and iterations"
author: "Enrico Toffalini"
include-in-header: ../assets/slidesheader.html
format:
  revealjs:
    code-line-numbers: false
    css: custom.css
    theme: default
    slide-number: c/t
    self-contained: false
    code-fold: false
    code-summary: "Show code"
    code-overflow: wrap
    title-slide-attributes: 
     data-background-image: "figures/psicostatLogo.png"
     data-background-size: "contain"
     data-background-opacity: "0.15"
execute:
  echo: true
  output: true
---
## Conditional Programming

Conditional statements like `if`, `if...else`, and `ifelse` in R are essential tools for automating tasks and assisting decision making in data science. What follows are a few simple "toy examples", but focus on the underlying logic. This will be greatly useful in more advanced applications

<hr/>

#### **`if`** statement

the `if` statement performs an action *only if* a condition is met
<div class="large-code">
```{r}
age = 20
```
```{r}
if(age >= 18){
  print("Adult")
}
```
</div>

## `if` statement

Basic flowchart showing the logic of the **`if`** statement:

<div style="text-align: center;">
  <img src="figures/if_chart.png" width="55%"/>
</div>


## `if...else` statement

Sometimes, however, you may need to perform *alternative* actions

<div style="text-align: center;">
  <img src="figures/ifelse_chart.png" width="55%"/>
</div>


## `if...else` statement

Sometimes, however, you may need to perform *alternative* actions

Here is a practical example of the **`if...else`** statement
<div class="large-code">
```{r}
age = 15
```
```{r}
if(age >= 18){
  print("Adult")
} else {
  print("Minor")
}
```
</div>

In the above example:

- *if* `age` is 18 or older, R will print `"Adult"`;
- otherwise (*else*) it will print `"Minor"`

## `if...else if...else` statement

When you need to evaluate more than just two alternative conditions, you can use **nested conditional statements**, that is you combine multiple `if...else` statements
<div class="large-code">
```{r}
age = 10
```
```{r}
if (age >= 18) {
  print("Adult")
} else if (age >= 13) {
  print("Adolescent")
} else if (age >= 2){
  print("Child")
} else {
  print("Infant")
}
```
</div>

## `if...else` statement

Possible, pratical use of **`if...else`** in a preplanned analysis for a hypothetical preregistered study: automate the decision to conduct additional analyses based on the result of a preliminary test. This helps create a reproducible analysis pipeline with a clear set of decisions

```{r, eval=F}
## PREPLANNED ANALYSIS

# preliminary test
tt1 = t.test(x1, x2, data=df, paired=TRUE)

# based on the p-value of the preliminary t-test, choose the next step
if (tt1$p.value < 0.05) {
  # If significant, perform an additional analysis with a linear model (lm)
  print("Significant result: proceeding with follow-up analysis")
  fit = lm(outcome ~ pred1 + pred2 * moder1, data = df)
  summary(fit)
} else {
  # else, report only the preliminary test
  print("No significant result: reporting preliminary results only")
  print(tt1)
}
```

## `ifelse` statement

All previous statements work with a single value at a time. However, you often want to apply this type of operation to an entire vector

Using `if` and `if..else` directly on a vector will **NOT** work as intended:

<div class="large-code">
```{r, error=T}
age = c(2, 28, 15, 1, 4, 67, 42, 14, 7)

if(age >= 18){
  print("Adult")
} else {
  print("Minor")
}
```
</div>

## `ifelse` statement

All previous statements work with a single value at a time. However, you often want to apply this type of operation to an entire vector

To handle such cases you can use the base **`ifelse`** function, that evaluates each element of a vector individually:

<div class="large-code">
```{r}
age = c(2, 28, 15, 1, 4, 67, 42, 14, 7)

ifelse(age >= 18, "Adult", "Minor")
```

...of course, it is always recommended to store the output:
```{r}
ageCategory = ifelse(age >= 18, "Adult", "Minor")
ageCategory
```
</div>

## `ifelse` statement

The **`ifelse`** statement can also be nested to manage multiple conditions, such as in the following example:
 
<div class="large-code">
```{r}
age = c(2, 28, 15, 1, 4, 67, 42, 14, 7)

ifelse(age >= 18, "Adult" , 
               ifelse(age >= 13, "Adolescent" ,
                            ifelse(age >= 2, "Child", "Infant")))

```
</div>

<!-- --------------------------------------------------------------------- -->

## Iterative Programming

**Iterative programming** allows you to repeat one or a series of actions automatically, for a predetermined number of times or until a condition is met

Let's start with understanding the basics of iterative programming with the **`for`** loop:

<div style="text-align: center;">
  <img src="figures/for_loop.png" width="50%"/>
</div>

## `for` loop

Here are a few simple examples of using the **`for`** loop
<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;"> <div>
```{r}
for(i in 1:5){
  print(i)
}
```
</div> <div>
```{r}
for(i in 1:5){
  print(i^2)
}
```
</div> <div>
```{r, cache=T}
for(i in 1:5){
  print(Sys.time())
  Sys.sleep(1)
}
```
</div> <div>
```{r, cache=T}
for(i in 1:5){
  print(Sys.time())
  Sys.sleep(2)
}
```
</div> <div>

## `for` loop

Here's a more interesting example of iterative **`for`** loop with practical usefulness: we want to repeat a data simulation for a predetermined number of times (5 iterations), each time drawing $n = 30$ values from a *standard normal distribution*, computing and displaying the average ... (This is actually a simple example of *Monte Carlo simulation*! ðŸ˜ƒ)

<div class="large-code">
```{r}
set.seed(0) # set a seed for reproducibility: best practice! 

for(i in 1:5){
  x = rnorm(n = 30, mean = 0, sd = 1)
  print(mean(x))
}

```
</div>

## `for` loop

In fact, in the previous example, the **`for`** loop displayed the results but didn't store it. For more effective use, you can combine the **`for`** loop with indexing with **`[]`** to save each result: 

<div class="large-code">
```{r}
set.seed(0) # set a seed for reproducibility: best practice! 
niter = 5 # set the desired number of iterations: best practice! 
# initialize a results vector with NAs: best practice!
results = rep(NA, niter) 
# now run the for loop! :-)
for(i in 1:niter){
  x = rnorm(n = 30, mean = 0, sd = 1)
  results[i] = mean(x)
}
results # display results
sd(results) # estimate standard error of the mean
```
</div>

## `for` loop

Let's extend the previous example with ... a few more iterations!
<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;"> <div>
```{r}
# STEP 1: RUN SIMULATION

# set number of iterations
niter = 10000
# initialize results vector
results = rep(NA, niter) 
# actually run simulation
for(i in 1:niter){
  x = rnorm(n = 30, mean = 0, sd = 1)
  results[i] = mean(x)
}
```
</div> <div>
```{r}
# STEP 2: PLOT RESULTS

# histogram, with a large number of bins
hist(results, breaks=50) 
```
</div> <div>
```{r}
# STEP 3: COMPUTE SD OF RESULTS
sd(results)
```
</div> <div>

â†’ Enjoy it! This is a proper estimation of the *Standard Error of the Mean* via Monte Carlo simulation! ðŸ˜Š

<!-- --------------------------------------------------------------------- -->


