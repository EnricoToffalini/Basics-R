---
title: "Data Structures (part 3)"
subtitle: "<b><em>Factors, Lists, Matrices, Arrays</em></b>"
author: "Enrico Toffalini"
include-in-header: ../assets/slidesheader.html
format:
  revealjs:
    code-line-numbers: false
    css: custom.css
    theme: default
    slide-number: c/t
    self-contained: true
    code-fold: false
    code-summary: "Show code"
    code-overflow: wrap
    title-slide-attributes: 
     data-background-image: "figures/psicostatLogo.png"
     data-background-size: "contain"
     data-background-opacity: "0.15"
execute:
  echo: true
  output: true
---
## Factors, Lists, Matrices, Arrays

As a data scientist, most of your tasks will probably require working with dataframes and vectors (see Part 1; remember that a dataframe is essentially a collection of vectors of different types)

However, other data structures that you will encounter are:

- **Factors**: store categorical data; factors are both a data type and a data structure
- **Lists**: collections of *objects of different types*, flexible and indexable
- **Matrices**: two-dimensional structures, essentially vectors organized into rows and columns, *all elements must be of the same type*
- **Arrays**: generalization of vectors and matrices to multi-dimensional data (e.g., 3D, 4D arrays), *all elements must be of the same type*

<!-- --------------------------------------------------------------------- -->

## Factors

**Factors** are a special type of data used to represent **categorical data**. They may look similar to simple *character vectors*. In fact, they function differently: 

- Internally, they consist of vectors of integers associated with "levels"
- Levels are unique categories, labelled for readability

```{r, echo=F}
library(readxl)
df = data.frame(read_excel("data/Courses40Cycle.xlsx"))
df$TypeOfCourse = as.factor(df$TypeOfCourse)
```
```{r}
df$TypeOfCourse
```

<p style="font-size:30px;">*Note how the bottom row lists all existing levels*</p>

## Factors

At any time, you can convert a vector (or a variable in a dataframe) into a factor using the **`as.factor()`** function
```{r}
df$TypeOfCourse = as.factor(df$TypeOfCourse)
```

Internally, a factor is stored as **integer**, with associated **labels** for levels: 
```{r}
as.integer(df$TypeOfCourse)
levels(df$TypeOfCourse)
```

*Warning!* Despite storing integers, factors are **not** numeric: 
```{r}
df$TypeOfCourse * 2
```

## Factors

By default, **factors** in R are **non-ordered**, there is **no** hierarchy between their categories.

To create **ordered factors**, you can use the **`as.ordered()`** function. 
```{r}
as.ordered(df$TypeOfCourse)
```

<div style="font-size:26px;">
Ordered factors include a hierarchical relationship between levels (e.g., `"low"` < `"medium"` < `"high"`; or a Likert scale like `"Strongly disagree"` < `"Disagree"` < `"Neutral"` < `"Agree"` < `"Strongly agree"`). Using ordered factors may be especially important for certain data analysis, e.g., *Structural Equation Modeling (SEM)* with ordinal data (e.g., using the `lavaan` package)
</div>

## Factors

<div style="font-size:36px;">
**Why use factors?**

In many cases, you might ignore and avoid them. However:

- Help **ensure consistency** when data is actually categorical

- Many *functions for statistical modeling* (e.g., `lm()`) **automatically treat characters as factors**, assigning dummy variables for each level; also tools like `ggplot2` for *visualization* use factors for grouping or labeling axes

- Ensure **efficient storage** of information as compared to characters, thanks to their internal structure

- **Ordered data**: see previous slide
</div>

<!-- --------------------------------------------------------------------- -->

## Lists

**Lists** are flexible structure that contain **objects of different types and different lengths** (including other lists... potentially creating an infinite *Inception*...)

```{r}
myChaos = list(TRUE, 0:5, df$Hours, letters[8:18], "PSICOSTAT")
myChaos
```

## Lists

You can access elements of a list with indexing using the double square brackets **`[[]]`**

```{r}
myChaos[[3]]
myChaos[[5]]
```

A convenient function for inspecting the structure of a list is **`str()`**:
```{r}
str(myChaos)
```

## Lists

**Why use lists?**

- Provide **very flexible storage** (for example, in a complex Monte Carlo simulation you might want to store not just a single result from each iteration, but multiple objects, such as each simulated dataframe, or whole model outputs)

- **Common in R**: many functions (e.g., `lm()`) return their summaries and results as lists (even dataframes themselves are special cases of lists), so get familiar with them!

- Are used in many context for handling **nested data** (e.g., JSON-formatted data)

<!-- --------------------------------------------------------------------- -->

## Matrices

In R, a **matrix** is a **2-dimensional** structure that contains only elements **of the same type**. Essentially, it can be thought of as a 2D vector. 

You can create a matrix easily using the **`matrix()`** function:

For example:

<div class="large-code">
```{r}
myMat = matrix(1:28, nrow=4, ncol=7)
myMat
```
</div>

## Matrices

**Indexing** in matrices is similar to dataframes, with indexes for row(s) and column(s), using **`[ <row(s) index> , <column(s) index> ]`**

```{r}
myMat[2, 5] # access a single element 
myMat[2:3, 5:7] # access ranges of elements
```

Like in vectors, you can perform **appropriate operations** on matrix data: 
```{r}
myMat^2 # element-wise squaring of all values
```

## Matrices

<div style="font-size:38px;">
**Why use (know) matrices?**

- **Mathematical operations**: matrices are fundamental for many tasks of linear algebra

- **Essential in modeling**: many statistical methods for statistical modeling and machine learning actually operate on matrices (even though this may remain hidden to you)

- **Computational efficiency**: much faster than dataframes for numeric computations
</div>

<!-- --------------------------------------------------------------------- -->

## Arrays

**Arrays** are multi-dimensional structures in R, generalizing *vectors (1-dimensional)* and *matrices (2-dimensional)* to the <em>**n-dimensional**</em> case

It's easy to create an array using the **`array()`** function:
<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;"> <div>
```{r}
myArr = array(1:30, dim = c(3,5,2))
myArr
```
</div><div>
\
â†’ Note that this is kind of a "cubic-structure" (3D structure): 3 rows, 5 columns, 2 slices

In a similar way, you could create hypercubes and so on
</div><div>

## Arrays
### indexing

**Indexing** is exactly the same as with matrices but... with 3 (sets of) indices! 

```{r}
myArr[1, 4, 2] # extract a single element

myArr[1:2 , 1:2 , ] # extract subsets of elements
```

## Arrays

<div style="font-size:38px;">
**Why use (know) arrays?**

- Might be useful for storing, and manipulate efficiently structure of **multi-dimensional data**

- Generally used in advanced topics and *machine learning* like when working on **image processing** and **spatial data**

- Arrays in R are conceptually similar to **tensors** in Python (e.g., `NumPy`, `TensorFlow`), where they play a fundamental role in **machine learning** and **deep learning**, as they allow researchers to manage large amounts of data with complex structures
</div>


<!-- --------------------------------------------------------------------- -->
