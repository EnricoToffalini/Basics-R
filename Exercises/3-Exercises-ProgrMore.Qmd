---
title: "Exercises - Basics of Programming... With a Little Data Science"
subtitle: "*Basics of R for Data Science*"
include-in-header: ../assets/header.html
format: 
  html:
    self-contained: true
    toc: true   
    toc-depth: 4  
    toc-expand: 4
    code-fold: false 
    message: false
    css: "../assets/custom.css"
editor: visual
---

*This set of exercises includes practicing and integrating various skills: working with dataframes and lists, applying conditional logic and iterative programming. Some of these exercises are pretty advanced for the purposes of the present course!*

-   Write a `for` loop that runs 20 iterations, each time generating and printing a single random number from a distribution of your choice (e.g., `rbinom()`, `rnorm()`, `rgamma()`, `rpois()`, `rlogis()`).

-   Write a `for` loop that runs 20 iterations, each time: 1) drawing a single number from a *standard normal distribution* (with `rnorm()`); 2) if the number is negative print it, otherwise print the string `"positive"`.

-   Use a `for` loop to address the following task: We aim to examine the sampling variability of the estimated correlation between two normally distributed, completely unrelated variables (i.e., their underlying true correlation is $r = 0$), when the sample size is $N = 30$

    -   run thousands of iterations, each time generating two independent random variables (using `rnorm()`) with the above characteristics;
    -   for each iteration, compute the estimated correlation coefficient with `cor()` and store it in a vector;
    -   after completing the iterations, visualize the distribution of estimated correlation coefficients with `hist()` or any other plotting method; also, compute the `median()` and the *95% confidence interval* using the quantile methods (i.e., with `quantile()` setting the argument `probs=c(.025,.975)`).

-   *Extra for advanced users:* Repeat the previous exercise without using a `for` loop, employing an alternative iterative method.

-   *Extra for advanced users:* Repeat the previous exercise using your preferred iterative method, but this time under the following scenario: $N = 30$, true correlation $r = 0.50$. To generate correlated random variables, you can use the `mvrnorm()` function from the `MASS` package.

